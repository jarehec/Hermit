#include "hermit.h"

extern token_type token;
extern int yyparse(void);
extern FILE *yyin;

char *token_names[] = {
	"AUTO", "BREAK", "CASE", "CHAR", "CONST", "CONTINUE", "DEFAULT", "DO",
	"DOUBLE", "ELSE", "ENUM", "EXTERN", "FLOAT", "FOR", "GOTO", "IF", "INLINE",
	"INT", "LONG", "REGISTER", "RESTRICT", "RETURN", "SHORT", "SIGNED",
	"SIZEOF", "STATIC", "STRUCT", "SWITCH", "TYPEDEF", "UNION", "UNSIGNED",
	"VOID", "VOLATILE","WHILE", "CONSTANT", "IDENTIFIER","STRING_LITERAL",
	"ELLIPSIS",	"RIGHT_ASSIGN", "LEFT_ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN",
	"MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN",
	"OR_ASSIGN", "RIGHT_OP", "LEFT_OP", "INC_OP", "DEC_OP", "PTR_OP", "AND_OP",
	"OR_OP", "LE_OP", "GE_OP", "EQ_OP", "NE_OP", "ENDFILE"
};

/**
 * get_tokname - retrieves a token from the token_names array
 * @pos: token id
 * Return: token string name
 */
char *get_tokname(int pos)
{
	return ((pos < 300 || pos > 359) ? (char *)&pos : token_names[pos - 300]);
}

/**
 * main - Entry point
 * @ac: number of arguments
 * @av: array of argument strings
 * Return: todo
 */
int main(int ac, char **av)
{
	if (ac == 2)
		yyin = fopen(av[1], "r");
	if (!yyin)
	{
		fputs("Usage: ./hermit <file>\n", stderr);
		exit(EXIT_FAILURE);
	}
	yyparse();
	fclose(yyin);
	return (0);
}
